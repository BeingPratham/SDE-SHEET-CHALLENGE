#include <bits/stdc++.h> 
long long merge(long long *arr, long long low, long long mid, long long high){
    long long temp[high-low+1];
    long long ind = 0, l = low, h = mid+1;
    long long count=0;
    
    while(l<=mid && h<=high){
        if(arr[l]<=arr[h]){
            temp[ind++] = arr[l++];
        }
        else{
            temp[ind++] = arr[h++];
            count = count+mid-l+1;
        }
    }
    while(l<=mid){
        temp[ind++] = arr[l++];
    }
    while(h<=high){
        temp[ind++] = arr[h++];
    }
    ind=0;
    for(long long i=low;i<=high;i++){
        arr[i] = temp[ind++];
    }
    return count;
}
long long solve(long long *arr, long long low, long long high){
    long long count=0;
    if(low<high){
        long long mid = (low+high)/2;
        count+=solve(arr,low,mid);
        count+=solve(arr,mid+1,high);
        count+=merge(arr,low,mid,high);
    }
    return count;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    return solve(arr, 0, n-1);
}
